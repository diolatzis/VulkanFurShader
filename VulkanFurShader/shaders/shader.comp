#version 450

#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 300		//Texture width
#define HEIGHT 300		//Texture height
#define GROUP_SIZE 32	//Threads group size
	
layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1 ) in;

struct Texel
{
  vec4 value;
};

layout(std140, binding = 0) buffer buf
{
   Texel image[];
};

//------------------ PERLIN NOISE HELPER FUNCTIONS ------------------//

#define FREQUENCY 10

int p[512];

const int permutation[256] = { 151,160,137,91,90,15,									
		131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23, 
		190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
		88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
		77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
		102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
		135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
		5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
		223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
		129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
		251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
		49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
		138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180};

void iniPerlin()
{
	for (int i = 0; i < 512; i++)
	{
		p[i] = permutation[i % 512];
	}
}


float fade(float t)
{
	return t*t*t*(t*(t * 6 - 15) + 10);
}

float  lerp(float t, float a, float b)
{
	return a + t * (b - a);
}

float  grad(int hash, float x, float y, float z)
{
	switch (hash & 0xF)
	{
		case 0x0: return  x + y;
		case 0x1: return -x + y;
		case 0x2: return  x - y;
		case 0x3: return -x - y;
		case 0x4: return  x + x;
		case 0x5: return -x + x;
		case 0x6: return  x - x;
		case 0x7: return -x - x;
		case 0x8: return  y + x;
		case 0x9: return -y + x;
		case 0xA: return  y - x;
		case 0xB: return -y - x;
		case 0xC: return  y + z;
		case 0xD: return -y + x;
		case 0xE: return  y - x;
		case 0xF: return -y - z;
		default: return 0;
	}
}


float getNoise(float x, float y, float z)
{
	int ix, iy, iz, gx, gy, gz;
	int a0, b0, aa, ab, ba, bb;

	float aa0, ab0, ba0, bb0;
	float aa1, ab1, ba1, bb1;
	float a1, a2, a3, a4, a5, a6, a7, a8;
	float u, v, w, a8_5, a4_1;

	ix = int(x); 
	x -= ix;
	iy = int(y);
	y -= iy;
	iz = int(z);
	z -= iz;

	gx = ix & 0xFF;
	gy = iy & 0xFF;
	gz = iz & 0xFF;

	a0 = gy + p[gx];
	b0 = gy + p[gx + 1];
	aa = gz + p[a0];
	ab = gz + p[a0 + 1];
	ba = gz + p[b0];
	bb = gz + p[b0 + 1];

	aa0 = p[aa]; aa1 = p[aa + 1];
	ab0 = p[ab]; ab1 = p[ab + 1];
	ba0 = p[ba]; ba1 = p[ba + 1];
	bb0 = p[bb]; bb1 = p[bb + 1];

	a1 = grad(int(bb1), x - 1, y - 1, z - 1);
	a2 = grad(int(ab1), x, y - 1, z - 1);
	a3 = grad(int(ba1), x - 1, y, z - 1);
	a4 = grad(int(aa1), x, y, z - 1);
	a5 = grad(int(bb0), x - 1, y - 1, z);
	a6 = grad(int(ab0), x, y - 1, z);
	a7 = grad(int(ba0), x - 1, y, z);
	a8 = grad(int(aa0), x, y, z);

	u = fade(x);
	v = fade(y);
	w = fade(z);

	a8_5 = lerp(v, lerp(u, a8, a7), lerp(u, a6, a5));
	a4_1 = lerp(v, lerp(u, a4, a3), lerp(u, a2, a1));
	return lerp(w, a8_5, a4_1);
}

//------------------	------------------//

void main()
{
	//In case a thread that has coords bigger than the texture size dont do anything
	if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
	return;
	
	//x and y in percentage of the texture size
	float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
	float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

	iniPerlin();												//Initialize the noise
	float noiseVal = getNoise(FREQUENCY*x,FREQUENCY*y,1.0f);	//Get the noise value

	if (noiseVal > 0.2 && noiseVal < 0.55) noiseVal = 0;		//Create contours for this range as pattern
	else noiseVal = 1;											//Everything else is a default color

	float r = noiseVal * 255;									//Default yellowish color
	float g = noiseVal * 200;
	float b = noiseVal * 50;

	vec4 color = vec4(r,g,b,255);								
          
	//Store the rgba value to the storage buffer
	image[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color;
}